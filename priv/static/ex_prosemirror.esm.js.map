{
  "version": 3,
  "sources": ["../../assets/js/inject.js", "../../assets/js/prosemirror/plugins/placeholder.js", "../../assets/js/prosemirror/menu.js", "../../assets/js/prosemirror/icons.js", "../../assets/js/prosemirror/marks/helper.js", "../../assets/js/prosemirror/marks/index.js", "../../assets/js/prosemirror/blocks/helpers.js", "../../assets/js/prosemirror/blocks/index.js", "../../assets/js/prosemirror/schema.js", "../../assets/js/ExEditorView.js", "../../assets/js/hooks/index.js", "../../assets/js/prosemirror/keymaps.js", "../../assets/js/index.js"],
  "sourcesContent": ["export default function (name, init) {\n  const inject = window.__EX_PROSEMIRROR_INJECT__ || {};\n\n  if (init) {\n    inject[name] = init;\n  }\n\n  const module = inject[name];\n\n  if (!module) {\n    throw new Error(`Unable to find ${name} in browser environment`);\n  } else {\n    return module;\n  }\n}\n", "// import {Plugin} from 'prosemirror-state';\n// import {Decoration, DecorationSet}  from 'prosemirror-view';\nimport inject from '../../inject';\n\nconst {Plugin} = inject('prosemirror-state');\nconst {Decoration, DecorationSet} = inject('prosemirror-view');\n\nexport const placeholderPlugin = new Plugin({\n  state: {\n    init() { return DecorationSet.empty; },\n    apply(tr, set) {\n      // Adjust decoration positions to changes made by the transaction\n      set = set.map(tr.mapping, tr.doc);\n      // See if the transaction adds or removes any placeholders\n      let action = tr.getMeta(this);\n      if (action && action.add) {\n        let widget = document.createElement('placeholder');\n        let deco = Decoration.widget(action.add.pos, widget, {id: action.add.id});\n        set = set.add(tr.doc, [deco]);\n      } else if (action && action.remove) {\n        set = set.remove(\n          set.find(\n            null,\n            null,\n            spec => spec.id == action.remove.id\n          )\n        );\n      }\n\n      return set;\n    }\n  },\n  props: {\n    decorations(state) { return this.getState(state); }\n  }\n});\n\n\nexport function insertPlaceholder(exEditorView, {nodeType}) {\n  // A fresh object to act as the ID for this upload\n  let id = {};\n\n  // Replace the selection with a placeholder\n  let tr = exEditorView.editorView.state.tr;\n  if (!tr.selection.empty) {\n    tr.deleteSelection();\n  }\n\n  exEditorView.editorNode.addEventListener(\n    'replacePlaceholder',\n    function(e){ replacePlaceholder(exEditorView, e); }\n  );\n\n  tr.setMeta(placeholderPlugin, {add: {id, pos: tr.selection.from}});\n  exEditorView.editorView.dispatch(tr);\n\n\n  const msg = {detail: {nodeType: nodeType, id, tr}};\n  exEditorView.editorNode.dispatchEvent(new CustomEvent('insertPlaceholder', msg));\n}\n\nexport function replacePlaceholder(exEditorView, {detail: detail}) {\n  const pos = findPlaceholder(exEditorView.editorView.state, detail.id);\n  // If the content around the placeholder has been deleted, drop\n  // the image\n  if (pos == null) return;\n  // Otherwise, insert it at the placeholder's position, and remove\n  // the placeholder\n\n  dispatchReplace({\n    node: detail.callback(exEditorView.editorView.state.schema.nodes),\n    id: detail.id,\n    pos,\n    exEditorView\n  });\n}\n\nfunction dispatchReplace({exEditorView, id, pos, node}) {\n  // TODO manage error\n  exEditorView.editorView.dispatch(exEditorView.editorView.state.tr\n    .replaceWith(pos, pos, node)\n    .setMeta(placeholderPlugin, {remove: {id}}));\n}\n\nfunction findPlaceholder(state, id) {\n  let decos = placeholderPlugin.getState(state);\n  let found = decos.find(null, null, spec => spec.id == id);\n  return found.length ? found[0].from : null;\n}\n", "// import { MenuItem, blockTypeItem, Dropdown } from 'prosemirror-menu';\nimport { icons } from './icons';\n// import { toggleMark } from 'prosemirror-commands';\nimport { toggleMultiMarks } from './marks/helper';\nimport inject from '../inject';\n\nconst { MenuItem, blockTypeItem, Dropdown } = inject('prosemirror-menu');\nconst { toggleMark } = inject('prosemirror-commands');\n\nfunction getTitle({name: name, spec: {title}}) {\n  return (title || name);\n}\n\nexport const generateHeadingItem = (schema) => {\n  if(schema.nodes.heading) {\n    return schema.nodes.heading.spec.config.values.map((heading) => {\n      return blockTypeItem(schema.nodes.heading, {\n        title: 'Header ' + heading,\n        label: 'Header ' + heading,\n        attrs: {level: heading}\n      });\n    });\n  } else {\n    return [];\n  }\n};\n\nexport const generateParagraphItem = (schema) => {\n  if(schema.nodes.paragraph) {\n    return [blockTypeItem(schema.nodes.paragraph, {\n      title: 'paragraph',\n      label: 'paragraph'\n    })];\n  }\n\n  return [];\n};\n\nexport const generateHTMLItem = (schema) => {\n  if(schema.nodes.html) {\n    return [\n      new MenuItem({\n        title: 'Insert HTML code',\n        label: 'HTML',\n        enable() { return true; },\n        run(_state, _transaction, view) {\n          const exEditorNode = view.dom.parentNode.parentNode;\n          exEditorNode.dispatchEvent(new CustomEvent('exProsemirrorInsertPlaceholder', {detail: {nodeType: 'html'}}));\n        }\n      })\n    ];\n  }\n\n  return [];\n};\n\n\nexport const generateMediaMenu = (schema) => {\n  if (!schema.nodes.image) {\n    return [];\n  }\n\n  return [\n    new MenuItem({\n      title: 'Insert image',\n      label: 'Image',\n      enable() { return true; },\n      run(_state, _transaction, view) {\n        const exEditorNode = view.dom.parentNode.parentNode;\n        exEditorNode.dispatchEvent(new CustomEvent('exProsemirrorInsertPlaceholder', {detail: {nodeType: 'image'}}));\n      }\n    })\n  ];\n};\n\nexport const generateMarkItem = (type) => {\n  return (schema) => {\n    if (!schema.marks[type]) {\n      return [];\n    }\n\n    const markElement = schema.marks[type];\n    const icon = markElement.spec.icon || icons[type];\n    return [markItem(schema.marks[type], { title: getTitle(markElement), icon })];\n  };\n};\n\n/**\n * Generate a MenuItem for a schema's mark.\n *\n * @param {any} markType - Type of mark to generate\n * @param {Object} options\n */\nexport function markItem(markType, options) {\n  let passedOptions = {\n    active(state) {\n      return markActive(state, markType);\n    },\n    enable: true\n  };\n\n  for (let prop in options) passedOptions[prop] = options[prop];\n\n  return cmdItem(toggleMark(markType), passedOptions);\n}\n\n\n/**\n * Execute a ProsemirrorCommand\n *\n * @param {any} cmd - command to execute\n * @param {Object} options\n */\nexport function cmdItem(cmd, options) {\n  let passedOptions = {\n    label: options.title,\n    run: cmd\n  };\n  for (let prop in options) passedOptions[prop] = options[prop];\n  if ((!options.enable || options.enable === true) && !options.select)\n    passedOptions[options.enable ? 'enable' : 'select'] = (state) => cmd(state);\n\n  return new MenuItem(passedOptions);\n}\n\n/**\n * Define if a mark is active or not.\n *\n * @param {EditorState} state\n * @param {any} type - Mark's type\n */\nexport function markActive(state, type) {\n  let { from, $from, to, empty } = state.selection;\n  if (empty) return type.isInSet(state.storedMarks || $from.marks());\n  else return state.doc.rangeHasMark(from, to, type);\n}\n\nexport const generateColorsMenu = (schema) => {\n  const items = generateMultiMarkItem(schema, 'color');\n  return [new Dropdown(items, {label: 'Color'})];\n};\n\nexport const generateFontFamilyMenu = (schema) => {\n  const items = generateMultiMarkItem(schema, 'font_family');\n  return [new Dropdown(items, {label: 'Font'})];\n};\n\nexport const generateMultiMarkItem = (schema, markType) => {\n  if (!schema.marks[markType]) {\n    return [];\n  }\n\n  const results = [multiMarkItem(schema.marks[markType], {title: 'default'})];\n  const values = schema.marks[markType].spec.config.values;\n\n  if (Array.isArray(values)) {\n    for (const value of values) {\n      const attrs = [];\n      attrs[markType] = value;\n      results.push(multiMarkItem(schema.marks[markType], { title: value }, attrs));\n    }\n  } else {\n    for (const [name, value] of Object.entries(values)) {\n      const attrs = [];\n      attrs[markType] = value;\n      results.push(multiMarkItem(schema.marks[markType], { title: name }, attrs));\n    }\n  }\n\n  return results;\n};\n\nexport function multiMarkItem(markType, options, attrs) {\n  return cmdItem(toggleMultiMarks(markType, attrs), {enable: true, ...options});\n}\n\n\nexport const menuHelper = { generateParagraphItem, generateHeadingItem, generateHTMLItem, generateMediaMenu };\n", "// import { icons as prosemirrorIcons } from 'prosemirror-menu';\nimport inject from \"../inject\";\n\nconst { icons: prosemirrorIcons } = inject('prosemirror-menu');\n\nexport const icons = {\n  ...prosemirrorIcons,\n  strikethrough: {\n    'width': 22,\n    'height': 22,\n    'path': 'M15.6 8.5c-.5-.7-1-1.1-1.3-1.3c-.6-.4-1.3-.6-2-.6c-2.7 0-2.8 1.7-2.8 2.1c0 1.6 1.8 2 3.2 2.3c4.4.9 4.6 2.8 4.6 3.9c0 1.4-.7 4.1-5 4.1A6.2 6.2 0 017 16.4l1.5-1.1c.4.6 1.6 2 3.7 2c1.6 0 2.5-.4 3-1.2c.4-.8.3-2-.8-2.6c-.7-.4-1.6-.7-2.9-1c-1-.2-3.9-.8-3.9-3.6C7.6 6 10.3 5 12.4 5c2.9 0 4.2 1.6 4.7 2.4l-1.5 1.1zM5 11h14a1 1 0 010 2H5a1 1 0 010-2z'\n  },\n  underline: {\n    'width': 22,\n    'height': 20,\n    'path': 'M16 5c.6 0 1 .4 1 1v5.5a4 4 0 01-.4 1.8l-1 1.4a5.3 5.3 0 01-5.5 1a5 5 0 01-1.6-1c-.5-.4-.8-.9-1.1-1.4a4 4 0 01-.4-1.8V6c0-.6.4-1 1-1s1 .4 1 1v5.5c0 .3 0 .6.2 1l.6.7a3.3 3.3 0 002.2.8a3.4 3.4 0 002.2-.8c.3-.2.4-.5.6-.8l.2-.9V6c0-.6.4-1 1-1zM8 17h8c.6 0 1 .4 1 1s-.4 1-1 1H8a1 1 0 010-2z'\n  }\n};\n", "/**\n * Toggle color text for cursor OR selected element.\n */\nexport function toggleMultiMarks(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection;\n    if (empty && !$cursor) return false;\n\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks())) {\n          dispatch(state.tr.removeStoredMark(markType));\n        }\n\n        if (attrs) {\n          dispatch(state.tr.addStoredMark(markType.create(attrs)));\n        }\n      } else {\n        let has = false, tr = state.tr;\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i];\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType);\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let { $from, $to } = ranges[i];\n          let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;\n          let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0;\n          let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0;\n          if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd; }\n          if (attrs) {\n            tr.addMark(from, to, markType.create(attrs));\n          } else {\n            tr.removeMark(from, to, markType);\n          }\n        }\n\n        dispatch(tr.scrollIntoView());\n      }\n    }\n    return true;\n  };\n}\n\n/**\n * Returns a function that will generate Marks for Prosemirror schema.\n */\nexport const generateExProsemirrorMarks = ( marksSelection, marks ) => {\n  const result = {};\n\n  marksSelection.map((/** @type {Object} */ element) => {\n    if (marks[element.type]) {\n      result[element.type] = { ...marks[element.type], config: element };\n    }\n  });\n\n  return result;\n};\n", "// import { marks as prosemirrorMarks } from 'prosemirror-schema-basic';\nimport inject from '../../inject';\nimport { generateMarkItem, generateColorsMenu, generateFontFamilyMenu } from '../menu';\nimport { generateExProsemirrorMarks } from './helper';\n\nconst { marks: prosemirrorMarks } = inject('prosemirror-schema-basic');\n\nexport const marks = {\n  strong: { ...prosemirrorMarks.strong, generateMenuItem: generateMarkItem('strong') },\n  em: { ...prosemirrorMarks.em, generateMenuItem: generateMarkItem('em') },\n  link: { ...prosemirrorMarks.link },\n  strikethrough: {\n    toDOM() {return ['del', 0];},\n    parseDOM: [{ tag: 'del' }],\n    generateMenuItem: generateMarkItem('strikethrough')\n  },\n  underline: {\n    toDOM() {\n      return ['span', { style: 'text-decoration: underline' }, 0];\n    },\n    parseDOM: [{ tag: 'span' }],\n    generateMenuItem: generateMarkItem('underline')\n  },\n  color: {\n    title: 'Color',\n    label: 'Color',\n    attrs: {color: {}},\n    toDOM(node) {\n      return ['span', {style: 'color: ' + node.attrs.color}, 0];\n    },\n    parseDOM: [{ tag: 'span', getAttrs(dom) {\n      return {\n        color: dom.style.color,\n      };\n    }}],\n    generateMenuItem: generateColorsMenu\n  },\n  font_family: {\n    title: 'Font',\n    label: 'Font',\n    attrs: {font_family: {}},\n    toDOM(node) {\n      return ['span', {style: 'font-family: ' + node.attrs.font_family}, 0];\n    },\n    parseDOM: [{ tag: 'span', getAttrs(dom) {\n      return {\n        font_family: dom.style['font-family'],\n      };\n    }}],\n    generateMenuItem: generateFontFamilyMenu\n  }\n};\n\n/**\n * Returns a function that will generate Marks for Prosemirror schema.\n */\nexport const generateSchemaMarks = ({ marksSelection, marks }) => (\n  generateExProsemirrorMarks(marksSelection, marks)\n);\n", "/**\n * @param {Object} blocks\n * @param {Boolean} inline\n\n */\nfunction inlineDoc(blocks, inline) {\n  return inline ? { content: 'block?' } : blocks.doc;\n}\n\n/**\n * @param {Object} blocksSelection\n * @param {Object} blocks\n * @param {Boolean} inline\n */\nexport const generateExProsemirorBlocks = (blocksSelection, blocks, inline) => {\n  const map = {\n    text: blocks.text,\n    doc: inlineDoc(blocks, inline)\n  };\n\n  blocksSelection.map((/** @type {Object} */ element) => {\n    if (blocks[element.type]) {\n      map[element.type] = { ...blocks[element.type], config: element };\n    }\n  });\n\n  return map;\n};\n", "// import { nodes } from 'prosemirror-schema-basic';\nimport { generateExProsemirorBlocks } from './helpers';\n\nimport { menuHelper } from '../menu';\nimport inject from '../../inject';\n\nconst { nodes } = inject('prosemirror-schema-basic');\n\nconst paragraph = {\n  ...nodes.paragraph,\n  generateMenuItem: menuHelper.generateParagraphItem\n};\n\nconst heading = {\n  ...nodes.heading,\n  generateMenuItem: menuHelper.generateHeadingItem\n};\n\nconst html = {\n  inline: true,\n  attrs: {\n    html: {default: null}\n  },\n  group: 'inline',\n  draggable: false,\n  parseDOM: [{tag: 'div[html]', getAttrs(dom) {\n    return {\n      html: dom.getAttribute('html'),\n    };\n  }}],\n  toDOM(node) {\n    let {html} = node.attrs;\n    let myDom = document.createElement('div');\n    myDom.innerHTML = html;\n    return myDom;\n  },\n  generateMenuItem: menuHelper.generateHTMLItem\n};\n\nconst image = {\n  ...nodes.image,\n  inline: false,\n  group: 'block',\n  generateMenuItem: menuHelper.generateMediaMenu\n};\n\nexport const blocks = {\n  doc: nodes.doc,\n  text: nodes.text,\n  hard_break: nodes.hard_break,\n  paragraph,\n  heading,\n  image,\n  html\n};\n\n/**\n * @param {{blocksSelection: Object, blocks: Object[], inline: boolean}} opts\n */\nexport const generateSchemablocks = ({ blocksSelection, blocks, inline }) => (\n  generateExProsemirorBlocks(blocksSelection, blocks, inline)\n);\n", "// import { Schema } from 'prosemirror-model';\nimport { generateSchemaMarks } from './marks';\nimport { generateSchemablocks } from './blocks';\nimport inject from '../inject';\n\nconst { Schema } = inject('prosemirror-model');\n\n/**\n * @param {{blocks: Object[], marks: Object[], blocksSelection: JSON, marksSelection: JSON, inline: Boolean}} options\n */\nexport default (options) => (\n  new Schema({\n    nodes: generateSchemablocks(options),\n    marks: generateSchemaMarks(options)\n  })\n);\n", "// import { DOMParser } from 'prosemirror-model';\n// import { EditorState } from 'prosemirror-state';\n// import { EditorView } from 'prosemirror-view';\nimport { insertPlaceholder } from './prosemirror/plugins/placeholder';\nimport schemaFunc from './prosemirror/schema';\nimport inject from './inject';\n\nconst { DOMParser } = inject('prosemirror-model');\nconst { EditorState } = inject('prosemirror-state');\nconst { EditorView } = inject('prosemirror-view');\n\nexport default class ExEditorView {\n  /**\n   * @param {HTMLElement} editorNode\n   * @param {{ blocks: Object[], marks: Object[], plugins: Object[] }} opts\n   */\n  constructor(editorNode, opts) {\n    this.editorNode = editorNode;\n    this.target = editorNode.dataset.target + '_plain';\n\n    this.editorView = new EditorView(editorNode, {\n      state: this.initializeEditorState(opts),\n      dispatchTransaction: (transaction) => {\n        this.dispatchTransaction(transaction);\n      }\n    });\n\n    this.addListeners();\n  }\n\n  initializeEditorState({ blocks, marks, plugins }) {\n    const opts = {\n      marksSelection: JSON.parse(this.editorNode.dataset.marks),\n      blocksSelection: JSON.parse(this.editorNode.dataset.blocks),\n      inline: JSON.parse(this.editorNode.dataset.inline),\n      blocks,\n      marks\n    };\n\n    const schema = schemaFunc(opts);\n\n    plugins = plugins(schema).map((plugin, index) => {\n      if (plugin.key.startsWith('plugin$')) {\n        plugin.key = 'plugin$' + index;\n      }\n      return plugin;\n    });\n\n    return EditorState.create({\n      doc: this.getDoc(schema),\n      plugins: plugins\n    });\n  }\n\n  getDoc(schema) {\n    const initialValue = document.querySelector(this.target).value;\n\n    if (initialValue.length > 0) {\n      try {\n        return schema.nodeFromJSON(JSON.parse(initialValue));\n      } catch {\n        return DOMParser.fromSchema(schema).parse('');\n      }\n    } else {\n      return DOMParser.fromSchema(schema).parse('');\n    }\n  }\n\n  addListeners() {\n    const exEditorView = this;\n    this.editorNode.addEventListener('exProsemirrorInsertPlaceholder', ({ detail }) => {\n      insertPlaceholder(exEditorView, { nodeType: detail.nodeType });\n    });\n  }\n\n  dispatchTransaction(transaction) {\n    const newState = this.editorView.state.apply(transaction);\n    const parsedState = newState.doc.toJSON();\n\n    // TODO liveview supports\n\n    const input = document.querySelector(this.target);\n    input.value = JSON.stringify(parsedState);\n    input.dispatchEvent(new CustomEvent('change', { detail: JSON.parse(input.value) }));\n\n    this.editorView.updateState(newState);\n  }\n}\n", "// import { exampleSetup as pluginFunc } from 'prosemirror-example-setup';\nimport schemaFunc from '../prosemirror/schema';\nimport exProsemirror from '../index';\nimport inject from '../inject';\n\nconst { exampleSetup: pluginFunc } = inject('prosemirror-example-setup');\n\nconst ExProsemirrorHooks = {};\n\nExProsemirrorHooks.MountProseMirror = {\n  mounted() {\n    exProsemirror.init(this.el, { schemaFunc, pluginFunc });\n  },\n  updated() {\n    // transforms the following schema rules\n    exProsemirror.init(this.el, { schemaFunc, pluginFunc });\n  },\n};\n\nexport { ExProsemirrorHooks };\n", "// import { keymap } from 'prosemirror-keymap';\n// import { baseKeymap, chainCommands, exitCode } from 'prosemirror-commands';\nimport inject from \"../inject\";\n\nconst { keymap } = inject('prosemirror-keymap');\nconst { baseKeymap, chainCommands, exitCode } = inject('prosemirror-commands');\n\nfunction insertHardBreak(state, dispatch) {\n  const br = state.schema.nodes.hard_break;\n\n  dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());\n}\n\nconst hardBreakKeymap = {\n  'Shift-Enter': chainCommands(exitCode, insertHardBreak),\n};\n\nexport { keymap, baseKeymap, hardBreakKeymap };\n", "import ExEditorView from './ExEditorView';\n\nexport { ExProsemirrorHooks } from './hooks';\nexport { blocks, generateSchemablocks } from './prosemirror/blocks';\nexport { marks, generateSchemaMarks } from './prosemirror/marks';\nexport { placeholderPlugin, insertPlaceholder, replacePlaceholder } from './prosemirror/plugins/placeholder';\nexport { icons } from './prosemirror/icons';\nexport { keymap, baseKeymap, hardBreakKeymap } from './prosemirror/keymaps';\nexport * as menu from './prosemirror/menu';\nexport { default as createSchema } from './prosemirror/schema';\nexport { default as ExEditorView } from './ExEditorView';\n\n/**\n * @type {NodeListOf<HTMLElement>} proseInstances\n */\nconst proseInstances = document.querySelectorAll('.ex-prosemirror');\n\n/**\n * ExProsemirror manage prosemirror in elixir project.\n */\nclass ExProsemirror {\n  /**\n   * @param {[Object]} blocks\n   */\n  setBlocks(blocks) {\n    this.blocks = blocks;\n    return this;\n  }\n\n  /**\n   * @param {[Object]} marks\n   */\n  setMarks(marks) {\n    this.marks = marks;\n    return this;\n  }\n\n  setPlugins(plugins) {\n    this.plugins = plugins;\n    return this;\n  }\n\n  /**\n   * Initializes all prosemirror instances.\n   */\n  initAll() {\n    Array.from(proseInstances).forEach(el => {\n      this.init(el);\n    });\n  }\n\n  /**\n   * Initializes the specified target (should be an ex_prosemirror instance).\n   *\n   * @param {Element} target - target to initialize.\n   */\n  init(target) {\n    if (target instanceof HTMLElement) {\n      target.innerHTML = '';\n      const plugins = this.plugins || [];\n      return new ExEditorView(target, { blocks: this.blocks, marks: this.marks, plugins });\n    }\n\n    return null;\n  }\n}\n\nexport default new ExProsemirror();\n"],
  "mappings": "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",
  "names": []
}
